<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes about linux and my work</title>
    <link>http://linux.laoqinren.net/posts/</link>
    <description>Recent content on Notes about linux and my work</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 16 Jul 2018 10:28:23 +0800</lastBuildDate>
    
	<atom:link href="http://linux.laoqinren.net/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>红黑树</title>
      <link>http://linux.laoqinren.net/posts/rbtree/</link>
      <pubDate>Mon, 16 Jul 2018 10:28:23 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/rbtree/</guid>
      <description>&lt;p&gt;在分析内核代码的过程中，发现很多内核子系统都会使用红黑树这个查找结构，本文由浅入深的总结了红黑树这个查找结构。&lt;/p&gt;

&lt;p&gt;本文尽可能做到浅显易懂。最后，本文会基于C语言，自己实现一个红黑树，方便大家对其理解。&lt;/p&gt;

&lt;h2 id=&#34;红黑树介绍&#34;&gt;红黑树介绍&lt;/h2&gt;

&lt;p&gt;红黑树由Rudolf Bayer于1972年发明，当时被称为平衡二叉B树（symmetric binary B-trees），1978年被Leonidas J. Guibas 和Robert Sedgewick改成一个比较摩登的名字：&lt;strong&gt;红黑树&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;红黑树是每个节点都带有颜色属性的二叉查找树，颜色为红色或黑色。那既然已经有二叉查找树，为什么还需要红黑树呢？&lt;/p&gt;

&lt;p&gt;了解过二叉查找树的同学应该都知道，随着不断的插入和删除结点，二叉查找树有可能会退化成一个长链。所以就有了AVL树的概念，目的就是在插入和删除结点时，保证查找树的平衡。而红黑树和AVL树类似，都是在进行插入和删除操作时通过特定操作保持二叉查找树的平衡，从而获得较高的查找性能。&lt;/p&gt;

&lt;p&gt;自从红黑树出来后，AVL树就被放到了博物馆里，据说是红黑树有更好的效率，更高的统计性能。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Boyer-Moore majority vote algorithm(摩尔投票算法)</title>
      <link>http://linux.laoqinren.net/posts/boyer-moore-majority-vote-algorithm/</link>
      <pubDate>Sat, 11 Nov 2017 17:58:21 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/boyer-moore-majority-vote-algorithm/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm&#34;&gt;Boyer-Moore majority vote algorithm&lt;/a&gt;(摩尔投票算法)是一种在线性时间&lt;code&gt;O(n)&lt;/code&gt;和空间复杂度的情况下，在一个元素序列中查找包含最多的元素。它是以&lt;code&gt;Robert S.Boyer&lt;/code&gt;和&lt;code&gt;J Strother Moore&lt;/code&gt;命名的，1981年发明的，是一种典型的流算法(&lt;code&gt;streaming algorithm&lt;/code&gt;)。&lt;/p&gt;

&lt;p&gt;在它最简单的形式就是，查找最多的元素，也就是在输入中重复出现超过一半以上(&lt;code&gt;n/2&lt;/code&gt;)的元素。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tmux快捷键总结</title>
      <link>http://linux.laoqinren.net/posts/tmux/</link>
      <pubDate>Wed, 01 Feb 2017 19:20:04 -0700</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/tmux/</guid>
      <description>&lt;p&gt;&lt;code&gt;tmux&lt;/code&gt; (&lt;code&gt;Terminal Multiplexer&lt;/code&gt;的简称), 是一款优秀的终端复用软件，类似 &lt;code&gt;GNU screen&lt;/code&gt;，但比&lt;code&gt;screen&lt;/code&gt;更出色。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Tmux&lt;/code&gt; 用于在一个终端窗口中运行多个终端会话。不仅如此，你还可以通过 &lt;code&gt;Tmux&lt;/code&gt; 使终端会话运行于后台或是按需接入、断开会话，这个功能非常实用。&lt;/p&gt;

&lt;p&gt;本文总结了&lt;code&gt;tmux&lt;/code&gt;常用的一些快捷键。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>