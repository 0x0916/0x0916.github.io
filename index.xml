<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome to laoqinren&#39;s notes on Notes about linux and my work</title>
    <link>http://linux.laoqinren.net/</link>
    <description>Recent content in Welcome to laoqinren&#39;s notes on Notes about linux and my work</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 06 Apr 2018 16:23:29 +0800</lastBuildDate>
    
	<atom:link href="http://linux.laoqinren.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux用户程序如何访问物理内存</title>
      <link>http://linux.laoqinren.net/kernel/reading-linux-physical-memory/</link>
      <pubDate>Sat, 28 Apr 2018 15:06:33 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/reading-linux-physical-memory/</guid>
      <description>&lt;p&gt;本文转载于：&lt;a href=&#34;http://ilinuxkernel.com/?p=1248&#34;&gt;http://ilinuxkernel.com/?p=1248&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：转载文中的代码在最新的内核上已经无法编译通过，原文中留言区提到的获取内核总的页数的方法有点瑕疵。这些在本文中都会进行修正。
本文中使用的内核版本为：&lt;a href=&#34;http://vault.centos.org/7.4.1708/updates/Source/SPackages/kernel-3.10.0-693.21.1.el7.src.rpm&#34;&gt;3.10.0-693.21.1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;用户态的程序都是在内存保护模式下使用内存，无法直接访问物理内存。同时用户程序使用的地址，也并不是物理地址，而是逻辑地址。至于这些逻辑地址对应的物理内存在哪里，用户进程本身并不知道。&lt;/p&gt;

&lt;p&gt;通过用户程序若想访问物理内存，我们需要通过内核才能实现。本文介绍基于内核模块的方式，实现在&lt;code&gt;Linux&lt;/code&gt;中用户态程序访问所有物理内存。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux内存模型分析</title>
      <link>http://linux.laoqinren.net/kernel/memory-model/</link>
      <pubDate>Wed, 25 Apr 2018 22:03:05 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/memory-model/</guid>
      <description>&lt;p&gt;本文转载于：&lt;a href=&#34;http://www.wowotech.net/memory_management/memory_model.html&#34;&gt;http://www.wowotech.net/memory_management/memory_model.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在原文的基础上，做了如下的改动：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;文中出现的内核代码修改成基于&lt;code&gt;4.4.128&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对于体系结构相关的代码,使用&lt;code&gt;x86&lt;/code&gt;架构中的代码&lt;/li&gt;
&lt;li&gt;对代码格式进行调整&lt;/li&gt;
&lt;li&gt;会添加一些内容，便于更进一步的理解&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux环境变量</title>
      <link>http://linux.laoqinren.net/linux/environment-list/</link>
      <pubDate>Thu, 19 Apr 2018 20:49:45 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/linux/environment-list/</guid>
      <description>&lt;p&gt;说起&lt;code&gt;linux&lt;/code&gt;环境变量，大家都不陌生，但最近在面试过程中，发现大家对其理解的还不是很准确，本文想专门对环境变量进行一些深入的介绍。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Floating proportions with flexible aging period</title>
      <link>http://linux.laoqinren.net/kernel/floating-proportions/</link>
      <pubDate>Tue, 17 Apr 2018 12:50:56 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/floating-proportions/</guid>
      <description>&lt;p&gt;&lt;code&gt;flex proportions&lt;/code&gt;基础设施的作用是：根据不同类型的事件，计算其所占的比例部分。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意，本文中的代码是基于稳定版本的内核&lt;code&gt;v4.4.128&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hungtask 机制分析</title>
      <link>http://linux.laoqinren.net/kernel/hungtask/</link>
      <pubDate>Mon, 16 Apr 2018 12:14:18 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/hungtask/</guid>
      <description>&lt;p&gt;本文分析了内核中&lt;code&gt;hungtask&lt;/code&gt;机制，下文中代码基于社区稳定版本内核，版本为：&lt;code&gt;v4.4.128&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内核基础设施——percpu_counter</title>
      <link>http://linux.laoqinren.net/kernel/percpu-counter/</link>
      <pubDate>Fri, 13 Apr 2018 20:50:15 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/percpu-counter/</guid>
      <description>&lt;p&gt;内核里很多模块都需要对一些事件进行统计，有一个叫做&lt;code&gt;percpu_counter&lt;/code&gt;的基础设施，来完成该任务。本文简单介绍了其用法和内核中的实现。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：本文中引用的内核代码版本为&lt;code&gt;v4.4.128&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux 系统调用 eventfd</title>
      <link>http://linux.laoqinren.net/linux/syscall-eventfd/</link>
      <pubDate>Thu, 12 Apr 2018 22:45:09 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/linux/syscall-eventfd/</guid>
      <description>&lt;p&gt;&lt;code&gt;eventfd&lt;/code&gt; 是&lt;code&gt;linux&lt;/code&gt;特有的&lt;code&gt;API&lt;/code&gt;，用于通知/等待机制的实现,该函数一般有两个使用场景：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;（1）用来实现用户态进程(线程)间的&lt;strong&gt;等待/通知(&lt;code&gt;wait/notify&lt;/code&gt;)&lt;/strong&gt; 机制&lt;/li&gt;
&lt;li&gt;（2）内核用来通知用户态应用程序某个事件的发生。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第一种场景，本文会给一个示例程序进行说明;第二种场景，可以通过cgroup中的事件通知机制进行了解和学习。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux OOM 机制分析</title>
      <link>http://linux.laoqinren.net/linux/out-of-memory/</link>
      <pubDate>Wed, 11 Apr 2018 12:24:17 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/linux/out-of-memory/</guid>
      <description>&lt;p&gt;本文简要介绍了&lt;code&gt;Linux OOM&lt;/code&gt;机制，并详细分析了&lt;code&gt;OOM&lt;/code&gt;机制的全局参数配置和进程级别的参数配置。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Example</title>
      <link>http://linux.laoqinren.net/example/</link>
      <pubDate>Mon, 02 Apr 2018 23:30:42 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/example/</guid>
      <description>这篇文章集中说明本博客支持的语法。 1.标题 H1 H2 H3 H4 H5 H6 2. 段落 使用单引号 * 或者单下划线 _ 标记 斜体强调 或者 斜体强调 使用两个引号 ** 或者两个下划线 __</description>
    </item>
    
    <item>
      <title>Boyer-Moore majority vote algorithm(摩尔投票算法)</title>
      <link>http://linux.laoqinren.net/posts/boyer-moore-majority-vote-algorithm/</link>
      <pubDate>Sat, 11 Nov 2017 17:58:21 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/boyer-moore-majority-vote-algorithm/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm&#34;&gt;Boyer-Moore majority vote algorithm&lt;/a&gt;(摩尔投票算法)是一种在线性时间&lt;code&gt;O(n)&lt;/code&gt;和空间复杂度的情况下，在一个元素序列中查找包含最多的元素。它是以&lt;code&gt;Robert S.Boyer&lt;/code&gt;和&lt;code&gt;J Strother Moore&lt;/code&gt;命名的，1981年发明的，是一种典型的流算法(&lt;code&gt;streaming algorithm&lt;/code&gt;)。&lt;/p&gt;

&lt;p&gt;在它最简单的形式就是，查找最多的元素，也就是在输入中重复出现超过一半以上(&lt;code&gt;n/2&lt;/code&gt;)的元素。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tmux快捷键总结</title>
      <link>http://linux.laoqinren.net/posts/tmux/</link>
      <pubDate>Wed, 01 Feb 2017 19:20:04 -0700</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/tmux/</guid>
      <description>&lt;p&gt;&lt;code&gt;tmux&lt;/code&gt; (&lt;code&gt;Terminal Multiplexer&lt;/code&gt;的简称), 是一款优秀的终端复用软件，类似 &lt;code&gt;GNU screen&lt;/code&gt;，但比&lt;code&gt;screen&lt;/code&gt;更出色。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Tmux&lt;/code&gt; 用于在一个终端窗口中运行多个终端会话。不仅如此，你还可以通过 &lt;code&gt;Tmux&lt;/code&gt; 使终端会话运行于后台或是按需接入、断开会话，这个功能非常实用。&lt;/p&gt;

&lt;p&gt;本文总结了&lt;code&gt;tmux&lt;/code&gt;常用的一些快捷键。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>