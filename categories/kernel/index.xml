<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kernel on Notes about linux and my work</title>
    <link>http://linux.laoqinren.net/categories/kernel/</link>
    <description>Recent content in kernel on Notes about linux and my work</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 18 Jul 2020 13:06:53 +0800</lastBuildDate>
    
	<atom:link href="http://linux.laoqinren.net/categories/kernel/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>内核基础设施——XArray</title>
      <link>http://linux.laoqinren.net/kernel/xarray/</link>
      <pubDate>Sat, 18 Jul 2020 13:06:53 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/xarray/</guid>
      <description>&lt;p&gt;本文详细介绍了Linux的XArray数据结构。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：本文分析中引用的代码来自于：&lt;a href=&#34;https://kernel.org/pub/linux/kernel/v5.x/linux-5.1.21.tar.xz&#34;&gt;linux-5.1.21.tar.xz&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Linux调度——概述</title>
      <link>http://linux.laoqinren.net/kernel/sched/intro/</link>
      <pubDate>Sun, 17 Nov 2019 19:52:36 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/sched/intro/</guid>
      <description>&lt;p&gt;调度器作为操作系统的核心子系统，具有非常重要的意义。&lt;code&gt;linux&lt;/code&gt;的调度器随着内核的更新也不断的进行着更新。
本文通过&lt;code&gt;redhat&lt;/code&gt;的&lt;code&gt;kernel&lt;/code&gt;（&lt;code&gt;linux-3.10.0-862&lt;/code&gt;）源码进行调度器的学习和分析，一步一步将调度器的细节展示出来。
相信大家通过对本文的学习，能够轻松的分析其它内核版本的调度器源码。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux调度——CPU运行队列</title>
      <link>http://linux.laoqinren.net/kernel/sched/sched-rq/</link>
      <pubDate>Sun, 17 Nov 2019 19:39:29 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/sched/sched-rq/</guid>
      <description>&lt;p&gt;本文介绍了Linux调度中的CPU运行队列。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux调度——神奇的current</title>
      <link>http://linux.laoqinren.net/kernel/sched/current/</link>
      <pubDate>Sat, 16 Nov 2019 10:26:50 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/sched/current/</guid>
      <description>本文介绍了linux内核中经常出现的current宏，并分析其通用的实现方法，以及其在x86-64下的实现方法。 current的作用 在内核中</description>
    </item>
    
    <item>
      <title>Linux调度——进程描述符</title>
      <link>http://linux.laoqinren.net/kernel/sched/task_struct/</link>
      <pubDate>Sat, 16 Nov 2019 10:15:48 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/sched/task_struct/</guid>
      <description>&lt;p&gt;在&lt;code&gt;linux&lt;/code&gt;系统中，每个进程都会有自己的进程描述符，它用结构体&lt;code&gt;struct task_struct&lt;/code&gt;来表示，其描述了一个具体进程的所有信息。
本文对&lt;strong&gt;进程描述符&lt;/strong&gt;进行了详细的介绍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内核基础设施——per cpu变量</title>
      <link>http://linux.laoqinren.net/kernel/percpu-var/</link>
      <pubDate>Thu, 14 Nov 2019 15:55:10 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/percpu-var/</guid>
      <description>&lt;p&gt;本节介绍了&lt;code&gt;per-cpu 变量&lt;/code&gt;这个内核基础设施。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内核基础设施——static_key</title>
      <link>http://linux.laoqinren.net/kernel/static_key/</link>
      <pubDate>Mon, 05 Aug 2019 19:43:48 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/static_key/</guid>
      <description>&lt;p&gt;本节介绍了&lt;code&gt;static_key&lt;/code&gt;这个内核基础设施。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内核调试——dyndbg特性</title>
      <link>http://linux.laoqinren.net/kernel/kernel-dynamic-debug/</link>
      <pubDate>Wed, 13 Mar 2019 22:30:09 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/kernel-dynamic-debug/</guid>
      <description>&lt;p&gt;本文介绍了如何使用内核的&lt;code&gt;dynamic debug (dyndbg)&lt;/code&gt;特性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内核基础设施——读写信号量</title>
      <link>http://linux.laoqinren.net/kernel/rw-semaphore/</link>
      <pubDate>Sat, 02 Mar 2019 14:10:37 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/rw-semaphore/</guid>
      <description>&lt;p&gt;本文首先介绍了读写信号量，然后介绍了其&lt;code&gt;API&lt;/code&gt;，接着以一个实验的形式，给大家展示了读写信号量内部的&lt;code&gt;count&lt;/code&gt;值的含义。只有明白了&lt;code&gt;count&lt;/code&gt;的含义，我们在分析问题时才能得心应手。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内存管理：shrink_lruvec分析</title>
      <link>http://linux.laoqinren.net/kernel/shrink_lruvec/</link>
      <pubDate>Tue, 29 Jan 2019 07:28:18 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/shrink_lruvec/</guid>
      <description>&lt;p&gt;&lt;code&gt;Linux&lt;/code&gt;内存回收操作的核心就是扫描&lt;code&gt;LRU&lt;/code&gt;链表，完成该工作的函数名称为&lt;code&gt;shrink_lruvec&lt;/code&gt;，本文首先介绍了&lt;code&gt;LRU&lt;/code&gt;链表，然后详细分析了&lt;code&gt;shrink_lruvec&lt;/code&gt;函数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kswapd内核线程</title>
      <link>http://linux.laoqinren.net/kernel/kswapd-thread/</link>
      <pubDate>Sat, 26 Jan 2019 07:07:32 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/kswapd-thread/</guid>
      <description>&lt;p&gt;&lt;code&gt;Linux&lt;/code&gt; 内核在系统内存紧张时，会唤醒内核线程&lt;code&gt;kswapd&lt;/code&gt;进行内存回收，从而释放掉一些不用的内存。本文将详细分析&lt;code&gt;kswapd&lt;/code&gt;的工作流程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>描述系统上cpu和memory的状态:node_states</title>
      <link>http://linux.laoqinren.net/kernel/node_states/</link>
      <pubDate>Sun, 20 Jan 2019 11:24:14 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/node_states/</guid>
      <description>&lt;p&gt;在内存管理和调度负载均衡中，有许多代码逻辑要遍历&lt;code&gt;node&lt;/code&gt;上的&lt;strong&gt;内存&lt;/strong&gt;和&lt;strong&gt;cpu&lt;/strong&gt;信息，加上现在的内核都支持内存和&lt;code&gt;cpu&lt;/code&gt;的热插拔，所以系统上&lt;code&gt;node&lt;/code&gt;的状态在内核上要有专门的数据结构进行描述。&lt;/p&gt;

&lt;p&gt;本文就研究一下用于描述&lt;code&gt;node&lt;/code&gt;信息的数据结构。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内存管理参数zone_reclaim_mode分析</title>
      <link>http://linux.laoqinren.net/kernel/vm-sysctl-zone_reclaim_mode/</link>
      <pubDate>Sat, 19 Jan 2019 09:53:01 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/vm-sysctl-zone_reclaim_mode/</guid>
      <description>&lt;p&gt;在&lt;code&gt;Linux&lt;/code&gt;系统中，有很多内存管理的配置参数，本文就详细分析&lt;code&gt;zone_reclaim_mode&lt;/code&gt;参数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内存规整（memory compaction）</title>
      <link>http://linux.laoqinren.net/kernel/memory-compaction/</link>
      <pubDate>Sat, 12 Jan 2019 12:06:18 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/memory-compaction/</guid>
      <description>&lt;p&gt;伙伴系统是基于页来管理的内存的，内存碎片也是基于页的，即由大量离散且不连续的页面导致的。本文详细分析一下去内存碎片的机制：&lt;strong&gt;内存规整&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;包括如下内容：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;内存规整相关的内存管理参数&lt;/li&gt;
&lt;li&gt;描述内存碎片化程度的指数：&lt;code&gt;extfrag_index&lt;/code&gt;和&lt;code&gt;unusable_index&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extfrag_threshold&lt;/code&gt;内存管理参数&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>内存管理参数lowmem_reserve_ratio分析</title>
      <link>http://linux.laoqinren.net/kernel/vm-sysctl-lowmem_reserve_ratio/</link>
      <pubDate>Sun, 06 Jan 2019 09:53:01 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/vm-sysctl-lowmem_reserve_ratio/</guid>
      <description>&lt;p&gt;在&lt;code&gt;Linux&lt;/code&gt;系统中，有很多内存管理的配置参数，本文就详细分析&lt;code&gt;lowmem_reserve_ratio&lt;/code&gt;参数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内存管理参数min_free_kbytes 分析</title>
      <link>http://linux.laoqinren.net/kernel/vm-sysctl-min_free_kbytes/</link>
      <pubDate>Sat, 05 Jan 2019 21:08:28 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/vm-sysctl-min_free_kbytes/</guid>
      <description>&lt;p&gt;在&lt;code&gt;Linux&lt;/code&gt;系统中，有很多内存管理的配置参数，本文就详细分析&lt;code&gt;min_free_kbytes&lt;/code&gt;参数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>struct page结构体</title>
      <link>http://linux.laoqinren.net/kernel/memory-page/</link>
      <pubDate>Sun, 30 Dec 2018 17:37:29 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/memory-page/</guid>
      <description>&lt;p&gt;内存管理基本上是以数据结构&lt;code&gt;struct page&lt;/code&gt;展开的，本文将详细围绕&lt;code&gt;struct page&lt;/code&gt;展开。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Radix Tree </title>
      <link>http://linux.laoqinren.net/kernel/radix-tree/</link>
      <pubDate>Sun, 09 Sep 2018 13:36:38 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/radix-tree/</guid>
      <description>&lt;p&gt;本文详细介绍了Linux的Radix树。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：本文分析中引用的代码来自于centos系统自带的内核：&lt;a href=&#34;http://vault.centos.org/7.5.1804/updates/Source/SPackages/kernel-3.10.0-862.9.1.el7.src.rpm&#34;&gt;kernel-3.10.0-862.9.1.el7&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>cgroup源码分析6——cgroup 中默认控制文件的内核实现分析</title>
      <link>http://linux.laoqinren.net/kernel/cgroup-source-default-file/</link>
      <pubDate>Sun, 26 Aug 2018 10:09:56 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/cgroup-source-default-file/</guid>
      <description>&lt;p&gt;cgroup中有一些默认的文件，本文详细分析了这些文件背后的内核实现细节，以便更深入的理解cgroup。&lt;/p&gt;

&lt;p&gt;这些文件包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;notify_on_release&lt;/li&gt;
&lt;li&gt;release_agent&lt;/li&gt;
&lt;li&gt;cgroup.procs&lt;/li&gt;
&lt;li&gt;tasks&lt;/li&gt;
&lt;li&gt;cgroup.clone_children&lt;/li&gt;
&lt;li&gt;cgroup.event_control&lt;/li&gt;
&lt;li&gt;cgroup.sane_behavior&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：本文分析中引用的代码来自于centos系统自带的内核：&lt;a href=&#34;http://vault.centos.org/7.5.1804/updates/Source/SPackages/kernel-3.10.0-862.9.1.el7.src.rpm&#34;&gt;kernel-3.10.0-862.9.1.el7&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>cgroup源码分析5——/proc/&lt;pid&gt;/cgroup实现分析</title>
      <link>http://linux.laoqinren.net/kernel/cgroup-source-proc-pid-cgroup/</link>
      <pubDate>Sat, 25 Aug 2018 16:32:32 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/cgroup-source-proc-pid-cgroup/</guid>
      <description>&lt;p&gt;本文详细分析了&lt;code&gt;/proc/pid/cgroup&lt;/code&gt;文件的内核实现。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：本文基于&lt;code&gt;3.10.0-862.el7.x86_64&lt;/code&gt;版本&lt;code&gt;kernel&lt;/code&gt;进行分析。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>cgroup源码分析4——css_set的哈希表分析</title>
      <link>http://linux.laoqinren.net/kernel/cgroup-source-css-set-hash/</link>
      <pubDate>Sat, 25 Aug 2018 16:31:46 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/cgroup-source-css-set-hash/</guid>
      <description>&lt;p&gt;在描述进程的结构体&lt;code&gt;task_struct&lt;/code&gt;中有一个类型为&lt;code&gt;css_set&lt;/code&gt;的成员&lt;code&gt;cgroups&lt;/code&gt;，它描述了进程的所有&lt;code&gt;cgroup&lt;/code&gt;信息，从前面的分析文章中我们已经知道通过&lt;code&gt;task_struct-&amp;gt;cgroups&lt;/code&gt;可以找到进程的所有不同&lt;code&gt;cgroup&lt;/code&gt;控制器的信息。&lt;/p&gt;

&lt;p&gt;当我们新创建一个进程时，新进程的&lt;code&gt;task_struct-&amp;gt;cgroups&lt;/code&gt;的值继承自其&lt;code&gt;父进程&lt;/code&gt;。此后，如果我们将新创建的进程添加到一个新的&lt;code&gt;cgroup&lt;/code&gt;中时，就需要重新给&lt;code&gt;task_struct-&amp;gt;cgroups&lt;/code&gt;赋值，这个值要么是一个已经存在的&lt;code&gt;css_set&lt;/code&gt;结构的指针，要么是新创建的&lt;code&gt;css_set&lt;/code&gt;的结构的指针。&lt;/p&gt;

&lt;p&gt;所以，我们就需要通过&lt;code&gt;进程的cgroup信息&lt;/code&gt;，快速查找其对应的&lt;code&gt;css_set结构&lt;/code&gt;是否存在，如果不存在的话就去创建它。&lt;code&gt;linux kernel&lt;/code&gt; 使用一个&lt;code&gt;hash&lt;/code&gt;表来完成这个工作。本文主要分析该&lt;code&gt;hash&lt;/code&gt;表的实现。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：本文基于&lt;code&gt;3.10.0-862.el7.x86_64&lt;/code&gt;版本&lt;code&gt;kernel&lt;/code&gt;进行分析。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>cgroup源码分析3——cgroup层级的mount流程</title>
      <link>http://linux.laoqinren.net/kernel/cgroup-source-cgroup_mount/</link>
      <pubDate>Sat, 25 Aug 2018 10:54:09 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/cgroup-source-cgroup_mount/</guid>
      <description>&lt;p&gt;本文继续该系列文章，分析了&lt;code&gt;cgroup&lt;/code&gt;各个子系统的&lt;code&gt;mount&lt;/code&gt;流程，当然也包括&lt;code&gt;umount/remount&lt;/code&gt;流程。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：本文基于&lt;code&gt;3.10.0-862.el7.x86_64&lt;/code&gt;版本&lt;code&gt;kernel&lt;/code&gt;进行分析。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>cgroup源码分析2——cgroup的初始化</title>
      <link>http://linux.laoqinren.net/kernel/cgroup-source-cgroup_init/</link>
      <pubDate>Thu, 23 Aug 2018 22:50:33 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/cgroup-source-cgroup_init/</guid>
      <description>&lt;p&gt;本文详细分析了&lt;code&gt;cgroup&lt;/code&gt;初始化的过程。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;本文基于&lt;code&gt;3.10.0-862.el7.x86_64&lt;/code&gt;版本kernel进行分析。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>cgroup源码分析1—— css_set和cgroup的关系</title>
      <link>http://linux.laoqinren.net/kernel/cgroup-source-css_set-and-cgroup/</link>
      <pubDate>Thu, 23 Aug 2018 15:19:35 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/cgroup-source-css_set-and-cgroup/</guid>
      <description>&lt;p&gt;本系列文章主要从源码入手，分析&lt;code&gt;linux kernel&lt;/code&gt;中&lt;code&gt;cgroup&lt;/code&gt;的实现。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;本文基于&lt;code&gt;3.10.0-862.el7.x86_64&lt;/code&gt;版本kernel进行分析。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>cgroup之debug子系统</title>
      <link>http://linux.laoqinren.net/kernel/cgroup-debug/</link>
      <pubDate>Thu, 09 Aug 2018 22:46:11 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/cgroup-debug/</guid>
      <description>&lt;p&gt;&lt;code&gt;cgroup&lt;/code&gt;的&lt;code&gt;debug子系统&lt;/code&gt;其实没有什么用处，要说作用的话，其实它就是一个示例子系统，给内核的开发者展示了内核&lt;code&gt;cgroup&lt;/code&gt;框架的使用方法，同时也展示了&lt;code&gt;cgroup&lt;/code&gt;框架中各个数据结构之间的关系。&lt;/p&gt;

&lt;p&gt;本文就通过研究&lt;code&gt;debug&lt;/code&gt;子系统，来展示&lt;code&gt;cgroup&lt;/code&gt;框架中各个数据结构的关系。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意: 内核代码采用&lt;code&gt;linux-3.10.0-862.9.1.el7&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>内核基础设施——list_head结构解析</title>
      <link>http://linux.laoqinren.net/kernel/list/</link>
      <pubDate>Sat, 23 Jun 2018 17:38:10 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/list/</guid>
      <description>&lt;p&gt;&lt;code&gt;list_head&lt;/code&gt;用法经常在&lt;code&gt;Linux kernel&lt;/code&gt;里面经常看见，该文对内核中的&lt;code&gt;list_head&lt;/code&gt;进行了总结分析。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：本文的中的代码来自于内核版本&lt;code&gt;v4.16&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>内核基础设施——hlist_head/hlist_node结构解析</title>
      <link>http://linux.laoqinren.net/kernel/hlist/</link>
      <pubDate>Wed, 20 Jun 2018 23:08:40 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/hlist/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;注意：本文中的代码参考于linux v4.16。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;数据结构&#34;&gt;数据结构&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;hlist_head&lt;/code&gt;和&lt;code&gt;hlist_node&lt;/code&gt;用于散列表，分别表示列表头（数组中的一项）和列表头所在双向链表中的某项，两者结构如下:&lt;/p&gt;

&lt;a target=&#34;_blank&#34; href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git/tree/include/linux/types.h?h=v4.16#n190&#34;&gt; include/linux/types.h(line 190) &lt;/a&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;struct hlist_head {
	struct hlist_node *first;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;a target=&#34;_blank&#34; href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git/tree/include/linux/types.h?h=v4.16#n194&#34;&gt; include/linux/types.h(line 194) &lt;/a&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;struct hlist_node {
	struct hlist_node *next, **pprev;
};

&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Cgroup之cpuacct子系统</title>
      <link>http://linux.laoqinren.net/kernel/cgroup-cpuacct/</link>
      <pubDate>Sun, 20 May 2018 20:57:16 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/cgroup-cpuacct/</guid>
      <description>&lt;p&gt;&lt;code&gt;cpuacct子系统&lt;/code&gt;（CPU accounting）会自动生成报告来显示&lt;code&gt;cgroup中&lt;/code&gt;任务所使用的&lt;code&gt;CPU&lt;/code&gt;资源，其中包括子群组任务。报告有两大类：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;usage&lt;/code&gt;: 统计&lt;code&gt;cgroup&lt;/code&gt;中进程使用CPU的时间，单位为纳秒。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stat&lt;/code&gt;: 统计&lt;code&gt;cgroup&lt;/code&gt;中进程使用CPU的时间，单位为&lt;code&gt;USER_HZ&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：本文中引用的内核代码版本为&lt;code&gt;v5.2&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>内核基础设施——wait queue</title>
      <link>http://linux.laoqinren.net/kernel/wait-queue/</link>
      <pubDate>Mon, 07 May 2018 18:27:48 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/wait-queue/</guid>
      <description>&lt;h2 id=&#34;什么是等待队列&#34;&gt;什么是等待队列？&lt;/h2&gt;

&lt;p&gt;在软件开发中任务经常由于某种条件没有得到满足而不得不进入睡眠状态，然后等待条件得到满足的时候再继续运行，进入运行状态。这种需求需要等待队列机制的支持。&lt;code&gt;Linux&lt;/code&gt;中提供了等待队列的机制，该机制在内核中应用很广泛。&lt;/p&gt;

&lt;p&gt;等待队列实现了在事件上的条件等待：希望等待特定事件的进程将自己放进合适的等待队列中，并放弃控制权。因此，等待队列表示一组睡眠的进程，当某一条件变为真时，由内核唤醒他们。&lt;/p&gt;

&lt;p&gt;在&lt;code&gt;Linux&lt;/code&gt;内核中使用等待队列的过程很简单，首先定义一个&lt;code&gt;wait_queue_head&lt;/code&gt;，然后如果一个&lt;code&gt;task&lt;/code&gt;想等待某种事件，那么调用&lt;code&gt;wait_event（等待队列，事件）&lt;/code&gt;就可以了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux用户程序如何访问物理内存</title>
      <link>http://linux.laoqinren.net/kernel/reading-linux-physical-memory/</link>
      <pubDate>Sat, 28 Apr 2018 15:06:33 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/reading-linux-physical-memory/</guid>
      <description>&lt;p&gt;本文转载于：&lt;a href=&#34;http://ilinuxkernel.com/?p=1248&#34;&gt;http://ilinuxkernel.com/?p=1248&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：转载文中的代码在最新的内核上已经无法编译通过，原文中留言区提到的获取内核总的页数的方法有点瑕疵。这些在本文中都会进行修正。
本文中使用的内核版本为：&lt;a href=&#34;http://vault.centos.org/7.4.1708/updates/Source/SPackages/kernel-3.10.0-693.21.1.el7.src.rpm&#34;&gt;3.10.0-693.21.1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;用户态的程序都是在内存保护模式下使用内存，无法直接访问物理内存。同时用户程序使用的地址，也并不是物理地址，而是逻辑地址。至于这些逻辑地址对应的物理内存在哪里，用户进程本身并不知道。&lt;/p&gt;

&lt;p&gt;通过用户程序若想访问物理内存，我们需要通过内核才能实现。本文介绍基于内核模块的方式，实现在&lt;code&gt;Linux&lt;/code&gt;中用户态程序访问所有物理内存。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux内存模型分析</title>
      <link>http://linux.laoqinren.net/kernel/memory-model/</link>
      <pubDate>Wed, 25 Apr 2018 22:03:05 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/memory-model/</guid>
      <description>&lt;p&gt;本文转载于：&lt;a href=&#34;http://www.wowotech.net/memory_management/memory_model.html&#34;&gt;http://www.wowotech.net/memory_management/memory_model.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在原文的基础上，做了如下的改动：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;文中出现的内核代码修改成基于&lt;code&gt;4.4.128&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对于体系结构相关的代码,使用&lt;code&gt;x86&lt;/code&gt;架构中的代码&lt;/li&gt;
&lt;li&gt;对代码格式进行调整&lt;/li&gt;
&lt;li&gt;会添加一些内容，便于更进一步的理解&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Floating proportions with flexible aging period</title>
      <link>http://linux.laoqinren.net/kernel/floating-proportions/</link>
      <pubDate>Tue, 17 Apr 2018 12:50:56 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/floating-proportions/</guid>
      <description>&lt;p&gt;&lt;code&gt;flex proportions&lt;/code&gt;基础设施的作用是：根据不同类型的事件，计算其所占的比例部分。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意，本文中的代码是基于稳定版本的内核&lt;code&gt;v4.4.128&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>hungtask 机制分析</title>
      <link>http://linux.laoqinren.net/kernel/hungtask/</link>
      <pubDate>Mon, 16 Apr 2018 12:14:18 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/hungtask/</guid>
      <description>&lt;p&gt;本文分析了内核中&lt;code&gt;hungtask&lt;/code&gt;机制，下文中代码基于社区稳定版本内核，版本为：&lt;code&gt;v4.4.128&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内核基础设施——percpu_counter</title>
      <link>http://linux.laoqinren.net/kernel/percpu-counter/</link>
      <pubDate>Fri, 13 Apr 2018 20:50:15 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/percpu-counter/</guid>
      <description>&lt;p&gt;内核里很多模块都需要对一些事件进行统计，有一个叫做&lt;code&gt;percpu_counter&lt;/code&gt;的基础设施，来完成该任务。本文简单介绍了其用法和内核中的实现。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：本文中引用的内核代码版本为&lt;code&gt;v4.4.128&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>