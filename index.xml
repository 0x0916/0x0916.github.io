<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome to laoqinren&#39;s notes on Notes about linux and my work</title>
    <link>http://linux.laoqinren.net/</link>
    <description>Recent content in Welcome to laoqinren&#39;s notes on Notes about linux and my work</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 06 Apr 2018 16:23:29 +0800</lastBuildDate><atom:link href="http://linux.laoqinren.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>012-可以加载ELF格式内核的Bootloader</title>
      <link>http://linux.laoqinren.net/posts/012-bootloader-with-elf-kernel/</link>
      <pubDate>Mon, 01 Mar 2021 17:06:40 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/012-bootloader-with-elf-kernel/</guid>
      <description>&lt;p&gt;上篇文章中我们的&lt;code&gt;内核&lt;/code&gt;最终是纯&lt;code&gt;二进制&lt;/code&gt;的指令，我们并不知道内核的大小，只是假设它小于&lt;code&gt;512&lt;/code&gt;字节，所以我们只从硬盘读取了一个扇区，加载到内存并执行。规范的做法是将内核组装成约定的格式，最终的内核映像符合这种格式。它有一个&lt;code&gt;header&lt;/code&gt;，用于保存内核的&lt;code&gt;元信息&lt;/code&gt;，内核的起始地址、加载到何处、由多少段组成等等。我们选择一种通用的格式&lt;code&gt;ELF&lt;/code&gt;，下面我们简要介绍一下这种格式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>009-进入保护模式</title>
      <link>http://linux.laoqinren.net/posts/009-protect-mode/</link>
      <pubDate>Sat, 27 Feb 2021 13:57:08 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/009-protect-mode/</guid>
      <description>&lt;p&gt;保护模式其实很简单，就是概念比较多，本就就跟大家一起讨论一下如何进入保护模式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>008-中断</title>
      <link>http://linux.laoqinren.net/posts/008-interrupt/</link>
      <pubDate>Fri, 26 Feb 2021 21:15:53 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/008-interrupt/</guid>
      <description>&lt;p&gt;本文将介绍中断的基础知识，并通过一些示例感受一些中断。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>007-过程调用</title>
      <link>http://linux.laoqinren.net/posts/007-function-call/</link>
      <pubDate>Fri, 26 Feb 2021 01:57:49 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/007-function-call/</guid>
      <description>&lt;p&gt;前面文章中介绍了如何控制屏幕光标，如何从硬盘读取数据。这种常用的功能，我们希望将其封装成过程调用，类似于高级语言中的函数，这样当我们需要控制光标或者从硬盘读数据时，就不用写大段的重复代码了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>005-I/O接口技术</title>
      <link>http://linux.laoqinren.net/posts/005-io-interface/</link>
      <pubDate>Thu, 25 Feb 2021 15:11:27 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/005-io-interface/</guid>
      <description>&lt;p&gt;&lt;code&gt;I/O&lt;/code&gt;接口用于&lt;code&gt;CPU&lt;/code&gt;与外部&lt;code&gt;I/O&lt;/code&gt;设备进行信息交换。例如与键盘、鼠标、打印机和显示等设备交互。&lt;code&gt;I/O&lt;/code&gt;接口电路与总线系统看似很复杂，但是落实到汇编语言代码上实则是很简单的。下面简要介绍一下&lt;code&gt;I/O&lt;/code&gt;接口技术。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>004-理解一下堆栈</title>
      <link>http://linux.laoqinren.net/posts/004-stack/</link>
      <pubDate>Wed, 24 Feb 2021 20:38:27 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/004-stack/</guid>
      <description>&lt;p&gt;本文将详细分析一下计算机上堆栈细节。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>003-调试引导扇区</title>
      <link>http://linux.laoqinren.net/posts/003-debug-boot-sectors/</link>
      <pubDate>Tue, 23 Feb 2021 23:48:51 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/003-debug-boot-sectors/</guid>
      <description>&lt;p&gt;调试是软件开发过程中重要的一个环节，本文将详细介绍如何调试引导扇区。
其实第一节也涉及了部分调试命令。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>002-在屏幕上打印Hello，World！</title>
      <link>http://linux.laoqinren.net/posts/002-print-hello-world/</link>
      <pubDate>Mon, 22 Feb 2021 23:19:30 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/002-print-hello-world/</guid>
      <description>&lt;p&gt;本文的目标是，构建一个引导扇区，并使用汇编语言，在屏幕上打印&lt;code&gt;Hello World&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;经过学习，我们可以到一些基本的&lt;code&gt;GNU&lt;/code&gt;汇编语言的用法，同时也会了解在屏幕上打印字符的原理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>001-计算机是如何启动的</title>
      <link>http://linux.laoqinren.net/posts/001-how-to-start/</link>
      <pubDate>Sun, 21 Feb 2021 23:58:42 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/001-how-to-start/</guid>
      <description>&lt;p&gt;通常计算机的启动方式有两种，传统的&lt;code&gt;BIOS-MBR&lt;/code&gt;启动模式和新的&lt;code&gt;UEFI-GPT&lt;/code&gt;启动模式，本文将介绍传统的&lt;code&gt;BIOS-MBR&lt;/code&gt;启动模式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux内核跟踪技术之——kprobe技术</title>
      <link>http://linux.laoqinren.net/kernel/linux-kprobe/</link>
      <pubDate>Sun, 30 Aug 2020 10:08:20 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/linux-kprobe/</guid>
      <description>&lt;p&gt;Linux kprobes调试技术是内核开发者们专门为了便于跟踪内核函数执行状态所设计的一种轻量级内核调试技术。利用kprobes技术，内核开发人员可以在内核的绝大多数指定函数中动态的插入探测点来收集所需的调试状态信息而基本不影响内核原有的执行流程。&lt;/p&gt;
&lt;p&gt;本文将介绍kprobe的用法和解析其工作原理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux时间子系统之低精度定时器(Timer)</title>
      <link>http://linux.laoqinren.net/kernel/linux-timer/</link>
      <pubDate>Sat, 29 Aug 2020 09:34:48 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/linux-timer/</guid>
      <description>&lt;p&gt;定时器层是基于&lt;code&gt;Tick&lt;/code&gt;层之上的，是根据系统&lt;code&gt;jiffies&lt;/code&gt;来触发的，精度相对比较低。利用定时器，我们可以设定在未来的某一时刻，触发一个特定的事件。经常，也会把这种低精度定时器称作时间轮（&lt;code&gt;Timer Wheel&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;本文将详细分析内核中低精度定时器的实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>do{}while(0)为什么要这样写呢？</title>
      <link>http://linux.laoqinren.net/posts/do-while-zero/</link>
      <pubDate>Mon, 03 Aug 2020 18:02:43 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/do-while-zero/</guid>
      <description>&lt;p&gt;内核里有很多代码里有类似&lt;code&gt;do{}while(0)&lt;/code&gt;这样的写法，这个写法有两个不同的用法。
本文介绍了&lt;code&gt;do{}while(0)&lt;/code&gt;的两个不同的用法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>__KERNEL__宏的作用是什么呢？该如何使用呢？</title>
      <link>http://linux.laoqinren.net/kernel/how-to-user-__kernel__/</link>
      <pubDate>Mon, 03 Aug 2020 17:47:08 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/how-to-user-__kernel__/</guid>
      <description>&lt;p&gt;&lt;code&gt;__KERNEL__&lt;/code&gt;宏的作用是什么呢？该如何使用呢？本文将详细介绍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于x86-64的栈布局和函数调用约定</title>
      <link>http://linux.laoqinren.net/posts/x86-64-stack-layout-and-call-conventions/</link>
      <pubDate>Tue, 28 Jul 2020 16:03:59 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/x86-64-stack-layout-and-call-conventions/</guid>
      <description>&lt;p&gt;在内核&lt;code&gt;panic&lt;/code&gt;时，会打印出出问题的调用栈信息，同时也可以通过&lt;code&gt;kdump&lt;/code&gt;结合&lt;code&gt;crash&lt;/code&gt;进行更深入的分析定位问题。&lt;/p&gt;
&lt;p&gt;本文分析了&lt;code&gt;x86-64&lt;/code&gt;的栈帧结构，为分析问题提供帮助。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内核基础设施——XArray</title>
      <link>http://linux.laoqinren.net/kernel/xarray/</link>
      <pubDate>Sat, 18 Jul 2020 13:06:53 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/xarray/</guid>
      <description>&lt;p&gt;本文详细介绍了Linux的XArray数据结构。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：本文分析中引用的代码来自于：&lt;a href=&#34;https://kernel.org/pub/linux/kernel/v5.x/linux-5.1.21.tar.xz&#34;&gt;linux-5.1.21.tar.xz&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Linux调度——概述</title>
      <link>http://linux.laoqinren.net/kernel/sched/intro/</link>
      <pubDate>Sun, 17 Nov 2019 19:52:36 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/sched/intro/</guid>
      <description>&lt;p&gt;调度器作为操作系统的核心子系统，具有非常重要的意义。&lt;code&gt;linux&lt;/code&gt;的调度器随着内核的更新也不断的进行着更新。
本文通过&lt;code&gt;redhat&lt;/code&gt;的&lt;code&gt;kernel&lt;/code&gt;（&lt;code&gt;linux-3.10.0-862&lt;/code&gt;）源码进行调度器的学习和分析，一步一步将调度器的细节展示出来。
相信大家通过对本文的学习，能够轻松的分析其它内核版本的调度器源码。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux调度——CPU运行队列</title>
      <link>http://linux.laoqinren.net/kernel/sched/sched-rq/</link>
      <pubDate>Sun, 17 Nov 2019 19:39:29 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/sched/sched-rq/</guid>
      <description>&lt;p&gt;本文介绍了Linux调度中的CPU运行队列。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux调度——神奇的current</title>
      <link>http://linux.laoqinren.net/kernel/sched/current/</link>
      <pubDate>Sat, 16 Nov 2019 10:26:50 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/sched/current/</guid>
      <description>本文介绍了linux内核中经常出现的current宏，并分析其通用的实现方法，以及其在x86-64下的实现方法。 current的作用 在内核中</description>
    </item>
    
    <item>
      <title>Linux调度——进程描述符</title>
      <link>http://linux.laoqinren.net/kernel/sched/task_struct/</link>
      <pubDate>Sat, 16 Nov 2019 10:15:48 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/sched/task_struct/</guid>
      <description>&lt;p&gt;在&lt;code&gt;linux&lt;/code&gt;系统中，每个进程都会有自己的进程描述符，它用结构体&lt;code&gt;struct task_struct&lt;/code&gt;来表示，其描述了一个具体进程的所有信息。
本文对&lt;strong&gt;进程描述符&lt;/strong&gt;进行了详细的介绍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内核基础设施——per cpu变量</title>
      <link>http://linux.laoqinren.net/kernel/percpu-var/</link>
      <pubDate>Thu, 14 Nov 2019 15:55:10 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/percpu-var/</guid>
      <description>&lt;p&gt;本节介绍了&lt;code&gt;per-cpu 变量&lt;/code&gt;这个内核基础设施。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内核基础设施——static_key</title>
      <link>http://linux.laoqinren.net/kernel/static_key/</link>
      <pubDate>Mon, 05 Aug 2019 19:43:48 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/static_key/</guid>
      <description>&lt;p&gt;本节介绍了&lt;code&gt;static_key&lt;/code&gt;这个内核基础设施。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内核调试——dyndbg特性</title>
      <link>http://linux.laoqinren.net/kernel/kernel-dynamic-debug/</link>
      <pubDate>Wed, 13 Mar 2019 22:30:09 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/kernel-dynamic-debug/</guid>
      <description>&lt;p&gt;本文介绍了如何使用内核的&lt;code&gt;dynamic debug (dyndbg) &lt;/code&gt;特性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内核基础设施——读写信号量</title>
      <link>http://linux.laoqinren.net/kernel/rw-semaphore/</link>
      <pubDate>Sat, 02 Mar 2019 14:10:37 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/rw-semaphore/</guid>
      <description>&lt;p&gt;本文首先介绍了读写信号量，然后介绍了其&lt;code&gt;API&lt;/code&gt;，接着以一个实验的形式，给大家展示了读写信号量内部的&lt;code&gt;count&lt;/code&gt;值的含义。只有明白了&lt;code&gt;count&lt;/code&gt;的含义，我们在分析问题时才能得心应手。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>制作自动化安装的CENTOS7 ISO</title>
      <link>http://linux.laoqinren.net/linux/build-auto-install-centos7-iso/</link>
      <pubDate>Sun, 10 Feb 2019 20:20:18 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/linux/build-auto-install-centos7-iso/</guid>
      <description>&lt;p&gt;本文以&lt;code&gt;centos 7.6&lt;/code&gt; 的&lt;code&gt;ISO&lt;/code&gt;为例，构建了用于自动化安装的&lt;code&gt;ISO&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux用户程序如何访问物理内存</title>
      <link>http://linux.laoqinren.net/linux/access-physical-address/</link>
      <pubDate>Sat, 09 Feb 2019 10:45:06 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/linux/access-physical-address/</guid>
      <description>&lt;p&gt;用户态的程序都是在内存保护模式下使用内存，无法直接访问物理内存。同时用户程序使用的地址都是逻辑地址，而不是物理地址。这些逻辑地址对应的物理内存在哪里，用户进程本身并不知道。&lt;/p&gt;
&lt;p&gt;如果用户程序想要访问物理内存，就需要通过内核实现。本文介绍基于内存模块的方式，实现&lt;code&gt;Linux&lt;/code&gt;中用户态程序访问所有物理内存。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内存管理：shrink_lruvec分析</title>
      <link>http://linux.laoqinren.net/kernel/shrink_lruvec/</link>
      <pubDate>Tue, 29 Jan 2019 07:28:18 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/shrink_lruvec/</guid>
      <description>&lt;p&gt;&lt;code&gt;Linux&lt;/code&gt;内存回收操作的核心就是扫描&lt;code&gt;LRU&lt;/code&gt;链表，完成该工作的函数名称为&lt;code&gt;shrink_lruvec&lt;/code&gt;，本文首先介绍了&lt;code&gt;LRU&lt;/code&gt;链表，然后详细分析了&lt;code&gt;shrink_lruvec&lt;/code&gt;函数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kswapd内核线程</title>
      <link>http://linux.laoqinren.net/kernel/kswapd-thread/</link>
      <pubDate>Sat, 26 Jan 2019 07:07:32 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/kswapd-thread/</guid>
      <description>&lt;p&gt;&lt;code&gt;Linux&lt;/code&gt; 内核在系统内存紧张时，会唤醒内核线程&lt;code&gt;kswapd&lt;/code&gt;进行内存回收，从而释放掉一些不用的内存。本文将详细分析&lt;code&gt;kswapd&lt;/code&gt;的工作流程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>描述系统上cpu和memory的状态:node_states</title>
      <link>http://linux.laoqinren.net/kernel/node_states/</link>
      <pubDate>Sun, 20 Jan 2019 11:24:14 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/node_states/</guid>
      <description>&lt;p&gt;在内存管理和调度负载均衡中，有许多代码逻辑要遍历&lt;code&gt;node&lt;/code&gt;上的&lt;strong&gt;内存&lt;/strong&gt;和&lt;strong&gt;cpu&lt;/strong&gt;信息，加上现在的内核都支持内存和&lt;code&gt;cpu&lt;/code&gt;的热插拔，所以系统上&lt;code&gt;node&lt;/code&gt;的状态在内核上要有专门的数据结构进行描述。&lt;/p&gt;
&lt;p&gt;本文就研究一下用于描述&lt;code&gt;node&lt;/code&gt;信息的数据结构。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内存管理参数zone_reclaim_mode分析</title>
      <link>http://linux.laoqinren.net/kernel/vm-sysctl-zone_reclaim_mode/</link>
      <pubDate>Sat, 19 Jan 2019 09:53:01 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/vm-sysctl-zone_reclaim_mode/</guid>
      <description>&lt;p&gt;在&lt;code&gt;Linux&lt;/code&gt;系统中，有很多内存管理的配置参数，本文就详细分析&lt;code&gt;zone_reclaim_mode&lt;/code&gt;参数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内核中内存信息的展示</title>
      <link>http://linux.laoqinren.net/linux/proc-memory/</link>
      <pubDate>Sun, 13 Jan 2019 10:28:37 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/linux/proc-memory/</guid>
      <description>&lt;p&gt;在&lt;code&gt;linux&lt;/code&gt;内核中，整个内存信息和状态的展示可以通过以下几个文件获得：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/proc/buddyinfo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;展示系统上各个&lt;code&gt;zone&lt;/code&gt;的&lt;code&gt;buddy&lt;/code&gt;信息，主要用来分析内存碎片问题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/proc/pagetypeinfo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;输出系统上各个&lt;code&gt;zone&lt;/code&gt;中的不同迁移类型的详细状态信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/proc/vmstat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;描述内存统计信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/proc/zoneinfo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;输出系统上各个内存&lt;code&gt;zone&lt;/code&gt;的详细信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在详细介绍这些接口之前，我们先要明确一下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;现在的内核中，内存管理最大概念为&lt;code&gt;node&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;在node上再分为一个或者几个&lt;code&gt;zone&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;每个&lt;code&gt;zone&lt;/code&gt;中又分为不同的迁移类型&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>内存规整（memory compaction）</title>
      <link>http://linux.laoqinren.net/kernel/memory-compaction/</link>
      <pubDate>Sat, 12 Jan 2019 12:06:18 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/memory-compaction/</guid>
      <description>&lt;p&gt;伙伴系统是基于页来管理的内存的，内存碎片也是基于页的，即由大量离散且不连续的页面导致的。本文详细分析一下去内存碎片的机制：&lt;strong&gt;内存规整&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;包括如下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存规整相关的内存管理参数&lt;/li&gt;
&lt;li&gt;描述内存碎片化程度的指数：&lt;code&gt;extfrag_index&lt;/code&gt;和&lt;code&gt;unusable_index&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extfrag_threshold&lt;/code&gt;内存管理参数&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>内存管理参数lowmem_reserve_ratio分析</title>
      <link>http://linux.laoqinren.net/kernel/vm-sysctl-lowmem_reserve_ratio/</link>
      <pubDate>Sun, 06 Jan 2019 09:53:01 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/vm-sysctl-lowmem_reserve_ratio/</guid>
      <description>&lt;p&gt;在&lt;code&gt;Linux&lt;/code&gt;系统中，有很多内存管理的配置参数，本文就详细分析&lt;code&gt;lowmem_reserve_ratio&lt;/code&gt;参数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内存管理参数min_free_kbytes 分析</title>
      <link>http://linux.laoqinren.net/kernel/vm-sysctl-min_free_kbytes/</link>
      <pubDate>Sat, 05 Jan 2019 21:08:28 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/vm-sysctl-min_free_kbytes/</guid>
      <description>&lt;p&gt;在&lt;code&gt;Linux&lt;/code&gt;系统中，有很多内存管理的配置参数，本文就详细分析&lt;code&gt;min_free_kbytes&lt;/code&gt;参数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>struct page结构体</title>
      <link>http://linux.laoqinren.net/kernel/memory-page/</link>
      <pubDate>Sun, 30 Dec 2018 17:37:29 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/memory-page/</guid>
      <description>&lt;p&gt;内存管理基本上是以数据结构&lt;code&gt;struct page&lt;/code&gt;展开的，本文将详细围绕&lt;code&gt;struct page&lt;/code&gt;展开。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>获取容器中init进程的pid</title>
      <link>http://linux.laoqinren.net/linux/get-init-pid-for-any-task/</link>
      <pubDate>Mon, 08 Oct 2018 14:26:43 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/linux/get-init-pid-for-any-task/</guid>
      <description>&lt;p&gt;本文题目为『&lt;strong&gt;获取容器中init进程的pid&lt;/strong&gt;』，其实说的还不够详细。其实容器中的进程都单独运行在一个独立的&lt;code&gt;pid namespace&lt;/code&gt;中，而我们有时需要在顶级的&lt;code&gt;pid namespace&lt;/code&gt;中获取其&lt;code&gt;init&lt;/code&gt;进程对应的在顶级&lt;code&gt;pid namespace&lt;/code&gt;的&lt;code&gt;pid&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;本文简要介绍了完成这个任务的一种方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>传递文件描述符</title>
      <link>http://linux.laoqinren.net/linux/passing-file-descriptors/</link>
      <pubDate>Sun, 16 Sep 2018 18:06:34 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/linux/passing-file-descriptors/</guid>
      <description>&lt;p&gt;&lt;code&gt;Unix domain socket&lt;/code&gt;具有一个特别的能力——传递文件描述符。其他的IPC机制都不支持传递文件描述符。它允许进程打开一个文件，然后将文件描述符发送给另外一个进程（很可能不相关的进程）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>FUSE介绍</title>
      <link>http://linux.laoqinren.net/linux/fuse/</link>
      <pubDate>Sat, 15 Sep 2018 20:10:34 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/linux/fuse/</guid>
      <description>&lt;p&gt;本文介绍了&lt;code&gt;FUSE&lt;/code&gt;（用户态文件系统），和其相应的编程库&lt;code&gt;libfuse&lt;/code&gt;，并给出了示例程序。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Radix Tree </title>
      <link>http://linux.laoqinren.net/kernel/radix-tree/</link>
      <pubDate>Sun, 09 Sep 2018 13:36:38 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/radix-tree/</guid>
      <description>&lt;p&gt;本文详细介绍了Linux的Radix树。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：本文分析中引用的代码来自于centos系统自带的内核：&lt;a href=&#34;http://vault.centos.org/7.5.1804/updates/Source/SPackages/kernel-3.10.0-862.9.1.el7.src.rpm&#34;&gt;kernel-3.10.0-862.9.1.el7&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>cgroup源码分析6——cgroup 中默认控制文件的内核实现分析</title>
      <link>http://linux.laoqinren.net/kernel/cgroup-source-default-file/</link>
      <pubDate>Sun, 26 Aug 2018 10:09:56 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/cgroup-source-default-file/</guid>
      <description>&lt;p&gt;cgroup中有一些默认的文件，本文详细分析了这些文件背后的内核实现细节，以便更深入的理解cgroup。&lt;/p&gt;
&lt;p&gt;这些文件包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;notify_on_release&lt;/li&gt;
&lt;li&gt;release_agent&lt;/li&gt;
&lt;li&gt;cgroup.procs&lt;/li&gt;
&lt;li&gt;tasks&lt;/li&gt;
&lt;li&gt;cgroup.clone_children&lt;/li&gt;
&lt;li&gt;cgroup.event_control&lt;/li&gt;
&lt;li&gt;cgroup.sane_behavior&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：本文分析中引用的代码来自于centos系统自带的内核：&lt;a href=&#34;http://vault.centos.org/7.5.1804/updates/Source/SPackages/kernel-3.10.0-862.9.1.el7.src.rpm&#34;&gt;kernel-3.10.0-862.9.1.el7&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>cgroup源码分析5——/proc/&lt;pid&gt;/cgroup实现分析</title>
      <link>http://linux.laoqinren.net/kernel/cgroup-source-proc-pid-cgroup/</link>
      <pubDate>Sat, 25 Aug 2018 16:32:32 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/cgroup-source-proc-pid-cgroup/</guid>
      <description>&lt;p&gt;本文详细分析了&lt;code&gt;/proc/pid/cgroup&lt;/code&gt;文件的内核实现。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：本文基于&lt;code&gt;3.10.0-862.el7.x86_64&lt;/code&gt;版本&lt;code&gt;kernel&lt;/code&gt;进行分析。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>cgroup源码分析4——css_set的哈希表分析</title>
      <link>http://linux.laoqinren.net/kernel/cgroup-source-css-set-hash/</link>
      <pubDate>Sat, 25 Aug 2018 16:31:46 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/cgroup-source-css-set-hash/</guid>
      <description>&lt;p&gt;在描述进程的结构体&lt;code&gt;task_struct&lt;/code&gt;中有一个类型为&lt;code&gt;css_set&lt;/code&gt;的成员&lt;code&gt;cgroups&lt;/code&gt;，它描述了进程的所有&lt;code&gt;cgroup&lt;/code&gt;信息，从前面的分析文章中我们已经知道通过&lt;code&gt;task_struct-&amp;gt;cgroups&lt;/code&gt;可以找到进程的所有不同&lt;code&gt;cgroup&lt;/code&gt;控制器的信息。&lt;/p&gt;
&lt;p&gt;当我们新创建一个进程时，新进程的&lt;code&gt;task_struct-&amp;gt;cgroups&lt;/code&gt;的值继承自其&lt;code&gt;父进程&lt;/code&gt;。此后，如果我们将新创建的进程添加到一个新的&lt;code&gt;cgroup&lt;/code&gt;中时，就需要重新给&lt;code&gt;task_struct-&amp;gt;cgroups&lt;/code&gt;赋值，这个值要么是一个已经存在的&lt;code&gt;css_set&lt;/code&gt;结构的指针，要么是新创建的&lt;code&gt;css_set&lt;/code&gt;的结构的指针。&lt;/p&gt;
&lt;p&gt;所以，我们就需要通过&lt;code&gt;进程的cgroup信息&lt;/code&gt;，快速查找其对应的&lt;code&gt;css_set结构&lt;/code&gt;是否存在，如果不存在的话就去创建它。&lt;code&gt;linux kernel&lt;/code&gt; 使用一个&lt;code&gt;hash&lt;/code&gt;表来完成这个工作。本文主要分析该&lt;code&gt;hash&lt;/code&gt;表的实现。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：本文基于&lt;code&gt;3.10.0-862.el7.x86_64&lt;/code&gt;版本&lt;code&gt;kernel&lt;/code&gt;进行分析。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>cgroup源码分析3——cgroup层级的mount流程</title>
      <link>http://linux.laoqinren.net/kernel/cgroup-source-cgroup_mount/</link>
      <pubDate>Sat, 25 Aug 2018 10:54:09 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/cgroup-source-cgroup_mount/</guid>
      <description>&lt;p&gt;本文继续该系列文章，分析了&lt;code&gt;cgroup&lt;/code&gt;各个子系统的&lt;code&gt;mount&lt;/code&gt;流程，当然也包括&lt;code&gt;umount/remount&lt;/code&gt;流程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：本文基于&lt;code&gt;3.10.0-862.el7.x86_64&lt;/code&gt;版本&lt;code&gt;kernel&lt;/code&gt;进行分析。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>cgroup源码分析2——cgroup的初始化</title>
      <link>http://linux.laoqinren.net/kernel/cgroup-source-cgroup_init/</link>
      <pubDate>Thu, 23 Aug 2018 22:50:33 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/cgroup-source-cgroup_init/</guid>
      <description>&lt;p&gt;本文详细分析了&lt;code&gt;cgroup&lt;/code&gt;初始化的过程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文基于&lt;code&gt;3.10.0-862.el7.x86_64&lt;/code&gt;版本kernel进行分析。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>cgroup源码分析1—— css_set和cgroup的关系</title>
      <link>http://linux.laoqinren.net/kernel/cgroup-source-css_set-and-cgroup/</link>
      <pubDate>Thu, 23 Aug 2018 15:19:35 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/cgroup-source-css_set-and-cgroup/</guid>
      <description>&lt;p&gt;本系列文章主要从源码入手，分析&lt;code&gt;linux kernel&lt;/code&gt;中&lt;code&gt;cgroup&lt;/code&gt;的实现。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文基于&lt;code&gt;3.10.0-862.el7.x86_64&lt;/code&gt;版本kernel进行分析。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Cgroup之不绑定任何subsystem</title>
      <link>http://linux.laoqinren.net/posts/hierarchy-without-controller-group/</link>
      <pubDate>Tue, 14 Aug 2018 19:59:57 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/hierarchy-without-controller-group/</guid>
      <description>&lt;p&gt;本文将创建并挂载一颗不和任何&lt;code&gt;subsystem&lt;/code&gt;系统绑定的&lt;code&gt;cgroup&lt;/code&gt;树。用来演示怎么创建、删除子cgroup，以及如何往cgroup中添加和删除进程，并详细介绍了每个&lt;code&gt;cgroup&lt;/code&gt;中默认都有的几个文件的含义。&lt;/p&gt;
&lt;p&gt;最后，介绍了这样使用&lt;code&gt;cgroup&lt;/code&gt;的一个用户。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文所有例子在&lt;code&gt;centos 7.5&lt;/code&gt; 下执行通过&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>cgroup之debug子系统</title>
      <link>http://linux.laoqinren.net/kernel/cgroup-debug/</link>
      <pubDate>Thu, 09 Aug 2018 22:46:11 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/cgroup-debug/</guid>
      <description>&lt;p&gt;&lt;code&gt;cgroup&lt;/code&gt;的&lt;code&gt;debug子系统&lt;/code&gt;其实没有什么用处，要说作用的话，其实它就是一个示例子系统，给内核的开发者展示了内核&lt;code&gt;cgroup&lt;/code&gt;框架的使用方法，同时也展示了&lt;code&gt;cgroup&lt;/code&gt;框架中各个数据结构之间的关系。&lt;/p&gt;
&lt;p&gt;本文就通过研究&lt;code&gt;debug&lt;/code&gt;子系统，来展示&lt;code&gt;cgroup&lt;/code&gt;框架中各个数据结构的关系。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意: 内核代码采用&lt;code&gt;linux-3.10.0-862.9.1.el7&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>红黑树(三)—— 在应用中复用linux的代码实现</title>
      <link>http://linux.laoqinren.net/posts/reuse-linux-kernel-rbtree/</link>
      <pubDate>Mon, 06 Aug 2018 16:17:53 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/reuse-linux-kernel-rbtree/</guid>
      <description>&lt;p&gt;红黑树在linux上的实现比较高效，本文详细介绍了如何在一个用户态的C程序中复用linux 内核的红黑树的实现。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：本文中的代码来自于：http://vault.centos.org/7.4.1708/updates/Source/SPackages/kernel-3.10.0-693.11.6.el7.src.rpm&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>红黑树(二)——linux 内核的设计实现</title>
      <link>http://linux.laoqinren.net/posts/rbtree-linux-kernel/</link>
      <pubDate>Mon, 06 Aug 2018 16:10:14 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/rbtree-linux-kernel/</guid>
      <description>&lt;p&gt;本文介绍了红黑树在linux kernel中实现，使用的内核版本为：&lt;a href=&#34;http://vault.centos.org/7.4.1708/updates/Source/SPackages/kernel-3.10.0-693.11.6.el7.src.rpm&#34;&gt;centos 3.10.0-693.11.6&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Process Resource</title>
      <link>http://linux.laoqinren.net/posts/process_resource/</link>
      <pubDate>Mon, 30 Jul 2018 19:02:06 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/process_resource/</guid>
      <description>&lt;p&gt;每一个进程都消耗系统上的cpu和内存资源，本文将详细介绍这些资源相关的系统调用。并且结合docker，简要介绍docker中对进程资源限制的支持。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>红黑树(一) ——原理</title>
      <link>http://linux.laoqinren.net/posts/rbtree/</link>
      <pubDate>Mon, 16 Jul 2018 10:28:23 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/rbtree/</guid>
      <description>&lt;p&gt;在分析内核代码的过程中，发现很多内核子系统都会使用红黑树这个查找结构，本文由浅入深的总结了红黑树这个查找结构。&lt;/p&gt;
&lt;p&gt;本文尽可能做到浅显易懂。最后，本文会基于C语言，自己实现一个红黑树，方便大家对其理解。&lt;/p&gt;
&lt;h2 id=&#34;红黑树介绍&#34;&gt;红黑树介绍&lt;/h2&gt;
&lt;p&gt;红黑树由Rudolf Bayer于1972年发明，当时被称为平衡二叉B树（symmetric binary B-trees），1978年被Leonidas J. Guibas 和Robert Sedgewick改成一个比较摩登的名字：&lt;strong&gt;红黑树&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;红黑树是每个节点都带有颜色属性的二叉查找树，颜色为红色或黑色。那既然已经有二叉查找树，为什么还需要红黑树呢？&lt;/p&gt;
&lt;p&gt;了解过二叉查找树的同学应该都知道，随着不断的插入和删除结点，二叉查找树有可能会退化成一个长链。所以就有了AVL树的概念，目的就是在插入和删除结点时，保证查找树的平衡。而红黑树和AVL树类似，都是在进行插入和删除操作时通过特定操作保持二叉查找树的平衡，从而获得较高的查找性能。&lt;/p&gt;
&lt;p&gt;自从红黑树出来后，AVL树就被放到了博物馆里，据说是红黑树有更好的效率，更高的统计性能。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在centos7中使用高版本的GCC</title>
      <link>http://linux.laoqinren.net/posts/use-high-version-of-gcc-in-centos7/</link>
      <pubDate>Wed, 27 Jun 2018 21:18:15 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/use-high-version-of-gcc-in-centos7/</guid>
      <description>&lt;p&gt;在&lt;code&gt;centos&lt;/code&gt;上进行内核开发时，由于一些内核特性依赖于高版本的&lt;code&gt;GCC特性&lt;/code&gt;（&lt;code&gt;gcc &amp;gt; 5.0&lt;/code&gt;），而&lt;code&gt;centos&lt;/code&gt;默认的GCC一般为&lt;code&gt;4.8.x&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;本文记录一种非常简单的在&lt;code&gt;centos&lt;/code&gt;上使用高版本的&lt;code&gt;GCC&lt;/code&gt;的方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内核基础设施——list_head结构解析</title>
      <link>http://linux.laoqinren.net/kernel/list/</link>
      <pubDate>Sat, 23 Jun 2018 17:38:10 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/list/</guid>
      <description>&lt;p&gt;&lt;code&gt;list_head&lt;/code&gt;用法经常在&lt;code&gt;Linux kernel&lt;/code&gt;里面经常看见，该文对内核中的&lt;code&gt;list_head&lt;/code&gt;进行了总结分析。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：本文的中的代码来自于内核版本&lt;code&gt;v4.16&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>内核基础设施——hlist_head/hlist_node结构解析</title>
      <link>http://linux.laoqinren.net/kernel/hlist/</link>
      <pubDate>Wed, 20 Jun 2018 23:08:40 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/hlist/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;注意：本文中的代码参考于linux v4.16。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;数据结构&#34;&gt;数据结构&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;hlist_head&lt;/code&gt;和&lt;code&gt;hlist_node&lt;/code&gt;用于散列表，分别表示列表头（数组中的一项）和列表头所在双向链表中的某项，两者结构如下:&lt;/p&gt;
&lt;a target=&#34;_blank&#34; href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git/tree/include/linux/types.h?h=v4.16#n190&#34;&gt; include/linux/types.h(line 190) &lt;/a&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hlist_head&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hlist_node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git/tree/include/linux/types.h?h=v4.16#n194&#34;&gt; include/linux/types.h(line 194) &lt;/a&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hlist_node&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hlist_node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pprev&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Cgroup之cpuacct子系统</title>
      <link>http://linux.laoqinren.net/kernel/cgroup-cpuacct/</link>
      <pubDate>Sun, 20 May 2018 20:57:16 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/cgroup-cpuacct/</guid>
      <description>&lt;p&gt;&lt;code&gt;cpuacct子系统&lt;/code&gt;（CPU accounting）会自动生成报告来显示&lt;code&gt;cgroup中&lt;/code&gt;任务所使用的&lt;code&gt;CPU&lt;/code&gt;资源，其中包括子群组任务。报告有两大类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;usage&lt;/code&gt;: 统计&lt;code&gt;cgroup&lt;/code&gt;中进程使用CPU的时间，单位为纳秒。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stat&lt;/code&gt;: 统计&lt;code&gt;cgroup&lt;/code&gt;中进程使用CPU的时间，单位为&lt;code&gt;USER_HZ&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：本文中引用的内核代码版本为&lt;code&gt;v5.2&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Cgroup之cpuset子系统</title>
      <link>http://linux.laoqinren.net/linux/cgroup-cpuset/</link>
      <pubDate>Thu, 10 May 2018 18:26:35 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/linux/cgroup-cpuset/</guid>
      <description>&lt;p&gt;最近分析了内核&lt;code&gt;cpuset&lt;/code&gt;的实现，发现在目前的常见的系统中应用不是很广泛。目前最火的&lt;code&gt;docker&lt;/code&gt;也只是使用了其最简单的功能。本文对&lt;code&gt;cpuset&lt;/code&gt;进行了简要总结，并总结了&lt;code&gt;docker&lt;/code&gt;如何使用它。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：本文中引用的内核代码版本为&lt;code&gt;v5.2&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>内核基础设施——wait queue</title>
      <link>http://linux.laoqinren.net/kernel/wait-queue/</link>
      <pubDate>Mon, 07 May 2018 18:27:48 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/wait-queue/</guid>
      <description>&lt;h2 id=&#34;什么是等待队列&#34;&gt;什么是等待队列？&lt;/h2&gt;
&lt;p&gt;在软件开发中任务经常由于某种条件没有得到满足而不得不进入睡眠状态，然后等待条件得到满足的时候再继续运行，进入运行状态。这种需求需要等待队列机制的支持。&lt;code&gt;Linux&lt;/code&gt;中提供了等待队列的机制，该机制在内核中应用很广泛。&lt;/p&gt;
&lt;p&gt;等待队列实现了在事件上的条件等待：希望等待特定事件的进程将自己放进合适的等待队列中，并放弃控制权。因此，等待队列表示一组睡眠的进程，当某一条件变为真时，由内核唤醒他们。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;Linux&lt;/code&gt;内核中使用等待队列的过程很简单，首先定义一个&lt;code&gt;wait_queue_head&lt;/code&gt;，然后如果一个&lt;code&gt;task&lt;/code&gt;想等待某种事件，那么调用&lt;code&gt;wait_event（等待队列，事件）&lt;/code&gt;就可以了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux交换空间</title>
      <link>http://linux.laoqinren.net/linux/linux-swap/</link>
      <pubDate>Fri, 04 May 2018 21:07:38 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/linux/linux-swap/</guid>
      <description>&lt;p&gt;本文转载于：https://segmentfault.com/a/1190000008125116&lt;/p&gt;
&lt;p&gt;每次安装Linux的时候，都会要求配置交换分区，那么这个分区是干嘛的呢？不设置这个分区有什么后果？如果一定要设置，设置多大比较合适？本篇将试图回答这些问题并尽量覆盖所有swap相关的知识。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux用户程序如何访问物理内存</title>
      <link>http://linux.laoqinren.net/kernel/reading-linux-physical-memory/</link>
      <pubDate>Sat, 28 Apr 2018 15:06:33 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/reading-linux-physical-memory/</guid>
      <description>&lt;p&gt;本文转载于：http://ilinuxkernel.com/?p=1248&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：转载文中的代码在最新的内核上已经无法编译通过，原文中留言区提到的获取内核总的页数的方法有点瑕疵。这些在本文中都会进行修正。
本文中使用的内核版本为：&lt;a href=&#34;http://vault.centos.org/7.4.1708/updates/Source/SPackages/kernel-3.10.0-693.21.1.el7.src.rpm&#34;&gt;3.10.0-693.21.1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用户态的程序都是在内存保护模式下使用内存，无法直接访问物理内存。同时用户程序使用的地址，也并不是物理地址，而是逻辑地址。至于这些逻辑地址对应的物理内存在哪里，用户进程本身并不知道。&lt;/p&gt;
&lt;p&gt;通过用户程序若想访问物理内存，我们需要通过内核才能实现。本文介绍基于内核模块的方式，实现在&lt;code&gt;Linux&lt;/code&gt;中用户态程序访问所有物理内存。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux内存模型分析</title>
      <link>http://linux.laoqinren.net/kernel/memory-model/</link>
      <pubDate>Wed, 25 Apr 2018 22:03:05 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/memory-model/</guid>
      <description>&lt;p&gt;本文转载于：http://www.wowotech.net/memory_management/memory_model.html&lt;/p&gt;
&lt;p&gt;在原文的基础上，做了如下的改动：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;文中出现的内核代码修改成基于&lt;code&gt;4.4.128&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对于体系结构相关的代码,使用&lt;code&gt;x86&lt;/code&gt;架构中的代码&lt;/li&gt;
&lt;li&gt;对代码格式进行调整&lt;/li&gt;
&lt;li&gt;会添加一些内容，便于更进一步的理解&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Linux环境变量</title>
      <link>http://linux.laoqinren.net/linux/environment-list/</link>
      <pubDate>Thu, 19 Apr 2018 20:49:45 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/linux/environment-list/</guid>
      <description>&lt;p&gt;说起&lt;code&gt;linux&lt;/code&gt;环境变量，大家都不陌生，但最近在面试过程中，发现大家对其理解的还不是很准确，本文想专门对环境变量进行一些深入的介绍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Floating proportions with flexible aging period</title>
      <link>http://linux.laoqinren.net/kernel/floating-proportions/</link>
      <pubDate>Tue, 17 Apr 2018 12:50:56 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/floating-proportions/</guid>
      <description>&lt;p&gt;&lt;code&gt;flex proportions&lt;/code&gt;基础设施的作用是：根据不同类型的事件，计算其所占的比例部分。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，本文中的代码是基于稳定版本的内核&lt;code&gt;v4.4.128&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>hungtask 机制分析</title>
      <link>http://linux.laoqinren.net/kernel/hungtask/</link>
      <pubDate>Mon, 16 Apr 2018 12:14:18 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/hungtask/</guid>
      <description>&lt;p&gt;本文分析了内核中&lt;code&gt;hungtask&lt;/code&gt;机制，下文中代码基于社区稳定版本内核，版本为：&lt;code&gt;v4.4.128&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内核基础设施——percpu_counter</title>
      <link>http://linux.laoqinren.net/kernel/percpu-counter/</link>
      <pubDate>Fri, 13 Apr 2018 20:50:15 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/kernel/percpu-counter/</guid>
      <description>&lt;p&gt;内核里很多模块都需要对一些事件进行统计，有一个叫做&lt;code&gt;percpu_counter&lt;/code&gt;的基础设施，来完成该任务。本文简单介绍了其用法和内核中的实现。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：本文中引用的内核代码版本为&lt;code&gt;v4.4.128&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Linux 系统调用 eventfd</title>
      <link>http://linux.laoqinren.net/linux/syscall-eventfd/</link>
      <pubDate>Thu, 12 Apr 2018 22:45:09 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/linux/syscall-eventfd/</guid>
      <description>&lt;p&gt;&lt;code&gt;eventfd&lt;/code&gt; 是&lt;code&gt;linux&lt;/code&gt;特有的&lt;code&gt;API&lt;/code&gt;，用于通知/等待机制的实现,该函数一般有两个使用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（1）用来实现用户态进程(线程)间的&lt;strong&gt;等待/通知(&lt;code&gt;wait/notify&lt;/code&gt;)&lt;/strong&gt; 机制&lt;/li&gt;
&lt;li&gt;（2）内核用来通知用户态应用程序某个事件的发生。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一种场景，本文会给一个示例程序进行说明;第二种场景，可以通过cgroup中的事件通知机制进行了解和学习。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux OOM 机制分析</title>
      <link>http://linux.laoqinren.net/linux/out-of-memory/</link>
      <pubDate>Wed, 11 Apr 2018 12:24:17 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/linux/out-of-memory/</guid>
      <description>&lt;p&gt;本文简要介绍了&lt;code&gt;Linux OOM&lt;/code&gt;机制，并详细分析了&lt;code&gt;OOM&lt;/code&gt;机制的全局参数配置和进程级别的参数配置。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Example</title>
      <link>http://linux.laoqinren.net/example/</link>
      <pubDate>Mon, 02 Apr 2018 23:30:42 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/example/</guid>
      <description>这篇文章集中说明本博客支持的语法。 1.标题 H1 H2 H3 H4 H5 H6 2. 段落 使用单引号 * 或者单下划线 _ 标记 斜体强调 或者 斜体强调 使用两个引号 ** 或者两个下划线 __</description>
    </item>
    
    <item>
      <title>Boyer-Moore majority vote algorithm(摩尔投票算法)</title>
      <link>http://linux.laoqinren.net/posts/boyer-moore-majority-vote-algorithm/</link>
      <pubDate>Sat, 11 Nov 2017 17:58:21 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/boyer-moore-majority-vote-algorithm/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm&#34;&gt;Boyer-Moore majority vote algorithm&lt;/a&gt;(摩尔投票算法)是一种在线性时间&lt;code&gt;O(n)&lt;/code&gt;和空间复杂度的情况下，在一个元素序列中查找包含最多的元素。它是以&lt;code&gt;Robert S.Boyer&lt;/code&gt;和&lt;code&gt;J Strother Moore&lt;/code&gt;命名的，1981年发明的，是一种典型的流算法(&lt;code&gt;streaming algorithm&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;在它最简单的形式就是，查找最多的元素，也就是在输入中重复出现超过一半以上(&lt;code&gt;n/2&lt;/code&gt;)的元素。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tmux快捷键总结</title>
      <link>http://linux.laoqinren.net/posts/tmux/</link>
      <pubDate>Wed, 01 Feb 2017 19:20:04 -0700</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/tmux/</guid>
      <description>&lt;p&gt;&lt;code&gt;tmux&lt;/code&gt; (&lt;code&gt;Terminal Multiplexer&lt;/code&gt;的简称), 是一款优秀的终端复用软件，类似 &lt;code&gt;GNU screen&lt;/code&gt;，但比&lt;code&gt;screen&lt;/code&gt;更出色。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Tmux&lt;/code&gt; 用于在一个终端窗口中运行多个终端会话。不仅如此，你还可以通过 &lt;code&gt;Tmux&lt;/code&gt; 使终端会话运行于后台或是按需接入、断开会话，这个功能非常实用。&lt;/p&gt;
&lt;p&gt;本文总结了&lt;code&gt;tmux&lt;/code&gt;常用的一些快捷键。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
