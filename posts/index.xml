<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes about linux and my work</title>
    <link>http://linux.laoqinren.net/posts/</link>
    <description>Recent content on Notes about linux and my work</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 01 Mar 2021 17:06:40 +0800</lastBuildDate><atom:link href="http://linux.laoqinren.net/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>012-可以加载ELF格式内核的Bootloader</title>
      <link>http://linux.laoqinren.net/posts/012-bootloader-with-elf-kernel/</link>
      <pubDate>Mon, 01 Mar 2021 17:06:40 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/012-bootloader-with-elf-kernel/</guid>
      <description>&lt;p&gt;上篇文章中我们的&lt;code&gt;内核&lt;/code&gt;最终是纯&lt;code&gt;二进制&lt;/code&gt;的指令，我们并不知道内核的大小，只是假设它小于&lt;code&gt;512&lt;/code&gt;字节，所以我们只从硬盘读取了一个扇区，加载到内存并执行。规范的做法是将内核组装成约定的格式，最终的内核映像符合这种格式。它有一个&lt;code&gt;header&lt;/code&gt;，用于保存内核的&lt;code&gt;元信息&lt;/code&gt;，内核的起始地址、加载到何处、由多少段组成等等。我们选择一种通用的格式&lt;code&gt;ELF&lt;/code&gt;，下面我们简要介绍一下这种格式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>009-进入保护模式</title>
      <link>http://linux.laoqinren.net/posts/009-protect-mode/</link>
      <pubDate>Sat, 27 Feb 2021 13:57:08 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/009-protect-mode/</guid>
      <description>&lt;p&gt;保护模式其实很简单，就是概念比较多，本就就跟大家一起讨论一下如何进入保护模式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>008-中断</title>
      <link>http://linux.laoqinren.net/posts/008-interrupt/</link>
      <pubDate>Fri, 26 Feb 2021 21:15:53 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/008-interrupt/</guid>
      <description>&lt;p&gt;本文将介绍中断的基础知识，并通过一些示例感受一些中断。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>007-过程调用</title>
      <link>http://linux.laoqinren.net/posts/007-function-call/</link>
      <pubDate>Fri, 26 Feb 2021 01:57:49 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/007-function-call/</guid>
      <description>&lt;p&gt;前面文章中介绍了如何控制屏幕光标，如何从硬盘读取数据。这种常用的功能，我们希望将其封装成过程调用，类似于高级语言中的函数，这样当我们需要控制光标或者从硬盘读数据时，就不用写大段的重复代码了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>005-I/O接口技术</title>
      <link>http://linux.laoqinren.net/posts/005-io-interface/</link>
      <pubDate>Thu, 25 Feb 2021 15:11:27 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/005-io-interface/</guid>
      <description>&lt;p&gt;&lt;code&gt;I/O&lt;/code&gt;接口用于&lt;code&gt;CPU&lt;/code&gt;与外部&lt;code&gt;I/O&lt;/code&gt;设备进行信息交换。例如与键盘、鼠标、打印机和显示等设备交互。&lt;code&gt;I/O&lt;/code&gt;接口电路与总线系统看似很复杂，但是落实到汇编语言代码上实则是很简单的。下面简要介绍一下&lt;code&gt;I/O&lt;/code&gt;接口技术。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>004-理解一下堆栈</title>
      <link>http://linux.laoqinren.net/posts/004-stack/</link>
      <pubDate>Wed, 24 Feb 2021 20:38:27 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/004-stack/</guid>
      <description>&lt;p&gt;本文将详细分析一下计算机上堆栈细节。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>003-调试引导扇区</title>
      <link>http://linux.laoqinren.net/posts/003-debug-boot-sectors/</link>
      <pubDate>Tue, 23 Feb 2021 23:48:51 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/003-debug-boot-sectors/</guid>
      <description>&lt;p&gt;调试是软件开发过程中重要的一个环节，本文将详细介绍如何调试引导扇区。
其实第一节也涉及了部分调试命令。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>002-在屏幕上打印Hello，World！</title>
      <link>http://linux.laoqinren.net/posts/002-print-hello-world/</link>
      <pubDate>Mon, 22 Feb 2021 23:19:30 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/002-print-hello-world/</guid>
      <description>&lt;p&gt;本文的目标是，构建一个引导扇区，并使用汇编语言，在屏幕上打印&lt;code&gt;Hello World&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;经过学习，我们可以到一些基本的&lt;code&gt;GNU&lt;/code&gt;汇编语言的用法，同时也会了解在屏幕上打印字符的原理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>001-计算机是如何启动的</title>
      <link>http://linux.laoqinren.net/posts/001-how-to-start/</link>
      <pubDate>Sun, 21 Feb 2021 23:58:42 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/001-how-to-start/</guid>
      <description>&lt;p&gt;通常计算机的启动方式有两种，传统的&lt;code&gt;BIOS-MBR&lt;/code&gt;启动模式和新的&lt;code&gt;UEFI-GPT&lt;/code&gt;启动模式，本文将介绍传统的&lt;code&gt;BIOS-MBR&lt;/code&gt;启动模式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>do{}while(0)为什么要这样写呢？</title>
      <link>http://linux.laoqinren.net/posts/do-while-zero/</link>
      <pubDate>Mon, 03 Aug 2020 18:02:43 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/do-while-zero/</guid>
      <description>&lt;p&gt;内核里有很多代码里有类似&lt;code&gt;do{}while(0)&lt;/code&gt;这样的写法，这个写法有两个不同的用法。
本文介绍了&lt;code&gt;do{}while(0)&lt;/code&gt;的两个不同的用法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于x86-64的栈布局和函数调用约定</title>
      <link>http://linux.laoqinren.net/posts/x86-64-stack-layout-and-call-conventions/</link>
      <pubDate>Tue, 28 Jul 2020 16:03:59 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/x86-64-stack-layout-and-call-conventions/</guid>
      <description>&lt;p&gt;在内核&lt;code&gt;panic&lt;/code&gt;时，会打印出出问题的调用栈信息，同时也可以通过&lt;code&gt;kdump&lt;/code&gt;结合&lt;code&gt;crash&lt;/code&gt;进行更深入的分析定位问题。&lt;/p&gt;
&lt;p&gt;本文分析了&lt;code&gt;x86-64&lt;/code&gt;的栈帧结构，为分析问题提供帮助。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cgroup之不绑定任何subsystem</title>
      <link>http://linux.laoqinren.net/posts/hierarchy-without-controller-group/</link>
      <pubDate>Tue, 14 Aug 2018 19:59:57 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/hierarchy-without-controller-group/</guid>
      <description>&lt;p&gt;本文将创建并挂载一颗不和任何&lt;code&gt;subsystem&lt;/code&gt;系统绑定的&lt;code&gt;cgroup&lt;/code&gt;树。用来演示怎么创建、删除子cgroup，以及如何往cgroup中添加和删除进程，并详细介绍了每个&lt;code&gt;cgroup&lt;/code&gt;中默认都有的几个文件的含义。&lt;/p&gt;
&lt;p&gt;最后，介绍了这样使用&lt;code&gt;cgroup&lt;/code&gt;的一个用户。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文所有例子在&lt;code&gt;centos 7.5&lt;/code&gt; 下执行通过&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>红黑树(三)—— 在应用中复用linux的代码实现</title>
      <link>http://linux.laoqinren.net/posts/reuse-linux-kernel-rbtree/</link>
      <pubDate>Mon, 06 Aug 2018 16:17:53 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/reuse-linux-kernel-rbtree/</guid>
      <description>&lt;p&gt;红黑树在linux上的实现比较高效，本文详细介绍了如何在一个用户态的C程序中复用linux 内核的红黑树的实现。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：本文中的代码来自于：http://vault.centos.org/7.4.1708/updates/Source/SPackages/kernel-3.10.0-693.11.6.el7.src.rpm&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>红黑树(二)——linux 内核的设计实现</title>
      <link>http://linux.laoqinren.net/posts/rbtree-linux-kernel/</link>
      <pubDate>Mon, 06 Aug 2018 16:10:14 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/rbtree-linux-kernel/</guid>
      <description>&lt;p&gt;本文介绍了红黑树在linux kernel中实现，使用的内核版本为：&lt;a href=&#34;http://vault.centos.org/7.4.1708/updates/Source/SPackages/kernel-3.10.0-693.11.6.el7.src.rpm&#34;&gt;centos 3.10.0-693.11.6&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Process Resource</title>
      <link>http://linux.laoqinren.net/posts/process_resource/</link>
      <pubDate>Mon, 30 Jul 2018 19:02:06 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/process_resource/</guid>
      <description>&lt;p&gt;每一个进程都消耗系统上的cpu和内存资源，本文将详细介绍这些资源相关的系统调用。并且结合docker，简要介绍docker中对进程资源限制的支持。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>红黑树(一) ——原理</title>
      <link>http://linux.laoqinren.net/posts/rbtree/</link>
      <pubDate>Mon, 16 Jul 2018 10:28:23 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/rbtree/</guid>
      <description>&lt;p&gt;在分析内核代码的过程中，发现很多内核子系统都会使用红黑树这个查找结构，本文由浅入深的总结了红黑树这个查找结构。&lt;/p&gt;
&lt;p&gt;本文尽可能做到浅显易懂。最后，本文会基于C语言，自己实现一个红黑树，方便大家对其理解。&lt;/p&gt;
&lt;h2 id=&#34;红黑树介绍&#34;&gt;红黑树介绍&lt;/h2&gt;
&lt;p&gt;红黑树由Rudolf Bayer于1972年发明，当时被称为平衡二叉B树（symmetric binary B-trees），1978年被Leonidas J. Guibas 和Robert Sedgewick改成一个比较摩登的名字：&lt;strong&gt;红黑树&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;红黑树是每个节点都带有颜色属性的二叉查找树，颜色为红色或黑色。那既然已经有二叉查找树，为什么还需要红黑树呢？&lt;/p&gt;
&lt;p&gt;了解过二叉查找树的同学应该都知道，随着不断的插入和删除结点，二叉查找树有可能会退化成一个长链。所以就有了AVL树的概念，目的就是在插入和删除结点时，保证查找树的平衡。而红黑树和AVL树类似，都是在进行插入和删除操作时通过特定操作保持二叉查找树的平衡，从而获得较高的查找性能。&lt;/p&gt;
&lt;p&gt;自从红黑树出来后，AVL树就被放到了博物馆里，据说是红黑树有更好的效率，更高的统计性能。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在centos7中使用高版本的GCC</title>
      <link>http://linux.laoqinren.net/posts/use-high-version-of-gcc-in-centos7/</link>
      <pubDate>Wed, 27 Jun 2018 21:18:15 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/use-high-version-of-gcc-in-centos7/</guid>
      <description>&lt;p&gt;在&lt;code&gt;centos&lt;/code&gt;上进行内核开发时，由于一些内核特性依赖于高版本的&lt;code&gt;GCC特性&lt;/code&gt;（&lt;code&gt;gcc &amp;gt; 5.0&lt;/code&gt;），而&lt;code&gt;centos&lt;/code&gt;默认的GCC一般为&lt;code&gt;4.8.x&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;本文记录一种非常简单的在&lt;code&gt;centos&lt;/code&gt;上使用高版本的&lt;code&gt;GCC&lt;/code&gt;的方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Boyer-Moore majority vote algorithm(摩尔投票算法)</title>
      <link>http://linux.laoqinren.net/posts/boyer-moore-majority-vote-algorithm/</link>
      <pubDate>Sat, 11 Nov 2017 17:58:21 +0800</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/boyer-moore-majority-vote-algorithm/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm&#34;&gt;Boyer-Moore majority vote algorithm&lt;/a&gt;(摩尔投票算法)是一种在线性时间&lt;code&gt;O(n)&lt;/code&gt;和空间复杂度的情况下，在一个元素序列中查找包含最多的元素。它是以&lt;code&gt;Robert S.Boyer&lt;/code&gt;和&lt;code&gt;J Strother Moore&lt;/code&gt;命名的，1981年发明的，是一种典型的流算法(&lt;code&gt;streaming algorithm&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;在它最简单的形式就是，查找最多的元素，也就是在输入中重复出现超过一半以上(&lt;code&gt;n/2&lt;/code&gt;)的元素。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tmux快捷键总结</title>
      <link>http://linux.laoqinren.net/posts/tmux/</link>
      <pubDate>Wed, 01 Feb 2017 19:20:04 -0700</pubDate>
      
      <guid>http://linux.laoqinren.net/posts/tmux/</guid>
      <description>&lt;p&gt;&lt;code&gt;tmux&lt;/code&gt; (&lt;code&gt;Terminal Multiplexer&lt;/code&gt;的简称), 是一款优秀的终端复用软件，类似 &lt;code&gt;GNU screen&lt;/code&gt;，但比&lt;code&gt;screen&lt;/code&gt;更出色。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Tmux&lt;/code&gt; 用于在一个终端窗口中运行多个终端会话。不仅如此，你还可以通过 &lt;code&gt;Tmux&lt;/code&gt; 使终端会话运行于后台或是按需接入、断开会话，这个功能非常实用。&lt;/p&gt;
&lt;p&gt;本文总结了&lt;code&gt;tmux&lt;/code&gt;常用的一些快捷键。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
